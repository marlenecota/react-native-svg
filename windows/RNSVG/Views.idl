import "Types.idl";

namespace RNSVG
{
  interface IRenderable
  {
    Windows.UI.Xaml.FrameworkElement SvgParent;
    Object Geometry;
    Boolean IsResponsible;

    void CreateResources();
    void Draw(Object deviceContext, Windows.Foundation.Size size);
    void UpdateProperties(Microsoft.ReactNative.IJSValueReader reader, Boolean forceUpdate, Boolean invalidate);
    void MergeProperties(RenderableView other);
    void SaveDefinition();
    void Unload();
    void CreateGeometry();
    IRenderable HitTest(Windows.Foundation.Point point);
  };

  [default_interface]
  runtimeclass SvgView : Windows.UI.Xaml.Controls.Panel, IRenderable
  {
    SvgView(Microsoft.ReactNative.IReactContext context);

    GroupView Group;
    Windows.UI.Color CurrentColor{ get; };
    Object Device{ get; };
    Object DeviceContext{ get; };
    Windows.Foundation.Collections.IMap<String, IRenderable> Templates{ get; };
    Windows.Foundation.Collections.IMap<String, BrushView> Brushes{ get; };

    void Invalidate();
  };

  [default_interface]
  unsealed runtimeclass RenderableView : Windows.UI.Xaml.FrameworkElement, IRenderable
  {
    RenderableView(Microsoft.ReactNative.IReactContext context);
    SvgView SvgRoot{ get; };

    String Id{ get; };
    Windows.Foundation.Numerics.Matrix3x2 SvgTransform{ get; };
    Windows.UI.Color Fill{ get; };
    Single FillOpacity{ get; };
    String FillBrushId{ get; };
    Windows.UI.Color Stroke{ get; };
    Single StrokeOpacity{ get; };
    String StrokeBrushId{ get; };
    SVGLength StrokeWidth{ get; };
    Single StrokeMiterLimit{ get; };
    Single StrokeDashOffset{ get; };
    Windows.Foundation.Collections.IVector<SVGLength> StrokeDashArray{ get; };
    Int32 StrokeLineCap{ get; };
    Int32 StrokeLineJoin{ get; };
    Int32 FillRule{ get; };
    Object ClipPathGeometry{ get; };
  };

  [default_interface]
  runtimeclass RectView : RenderableView
  {
    RectView();
  };

  [default_interface]
  runtimeclass CircleView : RenderableView
  {
    CircleView();
  };

  [default_interface]
  runtimeclass EllipseView : RenderableView
  {
    EllipseView();
  };

  [default_interface]
  runtimeclass LineView : RenderableView
  {
    LineView();
  };

  [default_interface]
  runtimeclass PathView : RenderableView
  {
    PathView();
  };

  [default_interface]
  runtimeclass UseView : RenderableView
  {
    UseView();
  };

  [default_interface]
  runtimeclass ImageView : RenderableView
  {
    ImageView();
  };

  [default_interface]
  unsealed runtimeclass GroupView : RenderableView
  {
    GroupView(Microsoft.ReactNative.IReactContext context);
    Windows.Foundation.Collections.IVector<IRenderable> Children { get; };

    Single FontSize;
    String FontFamily;
    String FontWeight;

    void DrawGroup(Object deviceContext, Windows.Foundation.Size size);
  };

  [default_interface]
  unsealed runtimeclass TextView : GroupView
  {
    TextView();
    Windows.Foundation.Collections.IVector<SVGLength> X{ get; };
    Windows.Foundation.Collections.IVector<SVGLength> Y{ get; };
    Windows.Foundation.Collections.IVector<SVGLength> DX{ get; };
    Windows.Foundation.Collections.IVector<SVGLength> DY{ get; };
  };

  [default_interface]
  runtimeclass TSpanView : TextView
  {
    TSpanView();

    Windows.Foundation.Collections.IVector<SVGLength> Rotate { get; };
  };

  [default_interface]
  runtimeclass DefsView : GroupView
  {
    DefsView();
  };

  [default_interface]
  runtimeclass SymbolView : GroupView
  {
    SymbolView();
    Single MinX{ get; };
    Single MinY{ get; };
    Single VbWidth{ get; };
    Single VbHeight{ get; };
    String Align{ get; };
    MeetOrSlice MeetOrSlice{ get; };
  };

  [default_interface]
  runtimeclass ClipPathView : GroupView
  {
    ClipPathView();
  };

  [default_interface]
  unsealed runtimeclass BrushView : GroupView
  {
    BrushView();

    Object Brush{ get; };
    void CreateBrush();
    void SetBounds(Windows.Foundation.Rect rect);
  };

  [default_interface]
  runtimeclass LinearGradientView : BrushView
  {
    LinearGradientView();
  };

  [default_interface]
  runtimeclass RadialGradientView : BrushView
  {
    RadialGradientView();
  };

  [default_interface]
  runtimeclass PatternView : BrushView
  {
    PatternView();
  };
}
